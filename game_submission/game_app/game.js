// Ch·ªù DOM load xong th√¨ m·ªõi th·ª±c thi
document.addEventListener('DOMContentLoaded', () => {

    // ===================================
    //  QU·∫¢N L√ù C√ÅC PH·∫¶N T·ª¨ DOM
    // ===================================
    const screens = {
        menu: document.getElementById('menu-screen'),
        play: document.getElementById('play-screen'),
        result: document.getElementById('result-screen'),
    };

    const buttons = {
        play: document.getElementById('play-btn'),
        about: document.getElementById('about-btn'),
        restart: document.getElementById('restart-btn'),
        menuPlay: document.getElementById('menu-btn-play'),
        playAgain: document.getElementById('play-again-btn'),
        menuResult: document.getElementById('menu-btn-result'),
    };

    const gameBoard = document.getElementById('game-board');
    const scoreEl = document.getElementById('score');
    const pairsLeftEl = document.getElementById('pairs-left');
    const finalScoreEl = document.getElementById('final-score');
    const quoteEl = document.getElementById('quote');

    // ===================================
    //  D·ªÆ LI·ªÜU GAME
    // ===================================
    // 6 c·∫∑p = 12 th·∫ª (ph√π h·ª£p grid 4x3 ho·∫∑c 3x4)
    const CARD_VALUES = [
        'T·ª≠ T·∫ø ‚ù§Ô∏è', 'ƒê·ªìng C·∫£m ü§ó', 'T·ª± Tin üß†', 
        'Y√™u Th∆∞∆°ng üíñ', 'Gia ƒê√¨nh üë®‚Äçüë©‚Äçüëß', 'T√¥n Tr·ªçng ü§ù'
    ];
    
    const QUOTES = [
        "Ph·ª• n·ªØ Vi·ªát Nam gi·ªèi vi·ªác n∆∞·ªõc, ƒë·∫£m vi·ªác nh√†.",
        "N∆°i n√†o c√≥ ph·ª• n·ªØ, n∆°i ƒë√≥ c√≥ v·∫ª ƒë·∫πp.",
        "Anh h√πng, b·∫•t khu·∫•t, trung h·∫≠u, ƒë·∫£m ƒëang.",
        "Ph·ª• n·ªØ l√† ƒë·ªÉ y√™u th∆∞∆°ng v√† tr√¢n tr·ªçng."
    ];

    // ===================================
    //  TR·∫†NG TH√ÅI GAME (STATE)
    // ===================================
    let hasFlippedCard = false;
    let lockBoard = false; // Kh√≥a b·∫£ng khi ƒëang l·∫≠t 2 th·∫ª
    let firstCard, secondCard;
    let score = 0;
    let totalPairs = CARD_VALUES.length;
    let pairsMatched = 0;


    // ===================================
    //  ƒêI·ªÄU H∆Ø·ªöNG M√ÄN H√åNH
    // ===================================
    
    /** Chuy·ªÉn ƒë·∫øn m√†n h√¨nh ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh */
    function navigateTo(screenName) {
        // ·∫®n t·∫•t c·∫£ m√†n h√¨nh
        Object.values(screens).forEach(screen => {
            screen.classList.remove('active');
        });
        // Hi·ªÉn th·ªã m√†n h√¨nh mong mu·ªën
        if (screens[screenName]) {
            screens[screenName].classList.add('active');
        }
    }

    // G√°n s·ª± ki·ªán cho c√°c n√∫t ƒëi·ªÅu h∆∞·ªõng
    buttons.play.onclick = () => initGame();
    buttons.restart.onclick = () => initGame();
    buttons.playAgain.onclick = () => initGame();
    buttons.menuPlay.onclick = () => navigateTo('menu');
    buttons.menuResult.onclick = () => navigateTo('menu');
    buttons.about.onclick = () => {
        alert(
            'Game K·ª∑ Ni·ªám 20/10\n\n' +
            'L·∫≠t c√°c th·∫ª ƒë·ªÉ t√¨m c·∫∑p th·∫ª gi·ªëng nhau.\n' +
            'Ch√∫c b·∫°n ch∆°i game vui v·∫ª v√† √Ω nghƒ©a!'
        );
    };

    // ===================================
    //  LOGIC GAME
    // ===================================

    /** Kh·ªüi t·∫°o v√† b·∫Øt ƒë·∫ßu game m·ªõi */
    function initGame() {
        navigateTo('play'); // Chuy·ªÉn ƒë·∫øn m√†n h√¨nh ch∆°i
        resetGameState(); // Reset c√°c bi·∫øn
        updateStats(); // C·∫≠p nh·∫≠t ƒëi·ªÉm
        generateGameBoard(); // T·∫°o b·∫£ng ch∆°i
    }
    
    /** Reset c√°c bi·∫øn tr·∫°ng th√°i game */
    function resetGameState() {
        hasFlippedCard = false;
        lockBoard = false;
        firstCard = null;
        secondCard = null;
        score = 0;
        pairsMatched = 0;
    }

    /** C·∫≠p nh·∫≠t hi·ªÉn th·ªã ƒëi·ªÉm v√† s·ªë c·∫∑p c√≤n l·∫°i */
    function updateStats() {
        scoreEl.textContent = score;
        pairsLeftEl.textContent = totalPairs - pairsMatched;
    }
    
    /** T·∫°o b·∫£ng ch∆°i v·ªõi c√°c th·∫ª ƒë√£ x√°o tr·ªôn */
    function generateGameBoard() {
        gameBoard.innerHTML = ''; // X√≥a b·∫£ng c≈©
        
        // G·∫•p ƒë√¥i m·∫£ng th·∫ª v√† x√°o tr·ªôn
        const gameCards = [...CARD_VALUES, ...CARD_VALUES];
        shuffle(gameCards);

        // T·∫°o HTML cho m·ªói th·∫ª
        gameCards.forEach(value => {
            const card = document.createElement('div');
            card.classList.add('card');
            card.dataset.value = value; // L∆∞u gi√° tr·ªã v√†o data-attribute

            card.innerHTML = `
                <div class="card-face card-front">
                    <span>${value}</span>
                </div>
                <div class="card-face card-back"></div>
            `;
            
            // G√°n s·ª± ki·ªán click
            card.addEventListener('click', flipCard);
            gameBoard.appendChild(card);
        });
    }

    /** Thu·∫≠t to√°n x√°o tr·ªôn Fisher-Yates */
    function shuffle(array) {
        for (let i = array.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [array[i], array[j]] = [array[j], array[i]];
        }
    }

    /** X·ª≠ l√Ω khi click l·∫≠t th·∫ª */
    function flipCard(event) {
        // B·ªè qua n·∫øu b·∫£ng ƒëang kh√≥a ho·∫∑c click v√†o th·∫ª ƒë√£ l·∫≠t
        if (lockBoard) return;
        const targetCard = event.currentTarget;
        if (targetCard === firstCard) return; // B·ªè qua n·∫øu click 2 l·∫ßn 1 th·∫ª

        targetCard.classList.add('is-flipped');

        if (!hasFlippedCard) {
            // L·∫ßn l·∫≠t ƒë·∫ßu ti√™n
            hasFlippedCard = true;
            firstCard = targetCard;
        } else {
            // L·∫ßn l·∫≠t th·ª© hai
            secondCard = targetCard;
            checkForMatch();
        }
    }

    /** Ki·ªÉm tra xem 2 th·∫ª c√≥ kh·ªõp kh√¥ng */
    function checkForMatch() {
        const isMatch = firstCard.dataset.value === secondCard.dataset.value;
        
        if (isMatch) {
            disableCards();
        } else {
            unflipCards();
        }
    }

    /** X·ª≠ l√Ω khi 2 th·∫ª kh·ªõp */
    function disableCards() {
        firstCard.removeEventListener('click', flipCard);
        secondCard.removeEventListener('click', flipCard);
        
        firstCard.classList.add('is-matched');
        secondCard.classList.add('is-matched');

        score += 10;
        pairsMatched++;
        updateStats();
        
        resetBoardState();
        
        // Ki·ªÉm tra th·∫Øng
        if (pairsMatched === totalPairs) {
            setTimeout(showResultScreen, 1000);
        }
    }

    /** X·ª≠ l√Ω khi 2 th·∫ª kh√¥ng kh·ªõp */
    function unflipCards() {
        lockBoard = true; // Kh√≥a b·∫£ng
        
        // Ch·ªù 1.2 gi√¢y r·ªìi l·∫≠t l·∫°i
        setTimeout(() => {
            firstCard.classList.remove('is-flipped');
            secondCard.classList.remove('is-flipped');
            resetBoardState();
        }, 1200);
    }
    
    /** Reset tr·∫°ng th√°i l·∫≠t th·∫ª */
    function resetBoardState() {
        [hasFlippedCard, lockBoard] = [false, false];
        [firstCard, secondCard] = [null, null];
    }

    /** Hi·ªÉn th·ªã m√†n h√¨nh k·∫øt qu·∫£ */
    function showResultScreen() {
        finalScoreEl.textContent = score;
        // L·∫•y 1 c√¢u quote ng·∫´u nhi√™n
        quoteEl.textContent = QUOTES[Math.floor(Math.random() * QUOTES.length)];
        navigateTo('result');
    }

    // ===================================
    //  KH·ªûI ƒê·ªòNG BAN ƒê·∫¶U
    // ===================================
    navigateTo('menu'); // B·∫Øt ƒë·∫ßu ·ªü m√†n h√¨nh Menu

});